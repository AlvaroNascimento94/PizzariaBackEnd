// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  password  String
  phone     String
  banner    String?
  active    Boolean   @default(true)
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())

  accessProfile   AccessProfile @relation(fields: [accessProfileId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  accessProfileId String

  orders Order[] @relation("WaiterOrders")

  @@map("users")
}

model AccessProfile {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())

  users       User[]
  permissions AccessProfilePermission[]

  @@map("access_profiles")
}

model Permission {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())

  accessProfiles AccessProfilePermission[]

  @@map("permissions")
}

model AccessProfilePermission {
  accessProfileId String
  permissionId    String
  systemOptionId  String
  createdAt       DateTime? @default(now())
  updatedAt       DateTime? @default(now())

  accessProfile AccessProfile @relation(fields: [accessProfileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  permission    Permission    @relation(fields: [permissionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  systemOption  SystemOption  @relation(fields: [systemOptionId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([accessProfileId, permissionId, systemOptionId])
  @@map("access_profile_permissions")
}

model SystemOption {
  id             String    @id @default(uuid())
  name           String
  parentOptionId String?
  createdAt      DateTime? @default(now())
  updatedAt      DateTime? @default(now())

  parentOption SystemOption?  @relation("SystemOptionHierarchy", fields: [parentOptionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  childOptions SystemOption[] @relation("SystemOptionHierarchy")

  accessProfilePermissions AccessProfilePermission[]

  @@map("system_options")
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String?
  color       String?
  icon        String?
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @default(now())
  products    Product[]

  @@map("categories")
}

model Product {
  id          String  @id @default(uuid())
  categoryId  String
  name        String
  description String
  price       Float
  banner      String
  status      Boolean @default(true)

  userCreateId String
  userUpdateId String
  createdAt    DateTime? @default(now())
  updatedAt    DateTime? @default(now())

  category      Category       @relation(fields: [categoryId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  orderProducts OrderProduct[]

  @@map("products")
}

model Order {
  id            String  @id @default(uuid())
  tableId       String
  orderStatusId String
  waiterId      String?
  price         Float   @default(0)

  createdAt    DateTime? @default(now())
  updatedAt    DateTime? @default(now())
  userCreateId String
  userUpdateId String

  waiter      User?       @relation("WaiterOrders", fields: [waiterId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  tables      Table       @relation(fields: [tableId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  orderStatus OrderStatus @relation(fields: [orderStatusId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  orderProducts OrderProduct[]
  payments      Payment[]

  @@map("orders")
}

model OrderStatus {
  id   String @id @default(uuid())
  name String

  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())
  
  orders        Order[]        @relation 
  orderProducts OrderProduct[] @relation("OrderProductStatus")
  @@map("order_status")
}

model Table {
  id        String   @id @default(uuid())
  name      String
  available Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  order     Order[]

  @@map("tables")
}

model OrderProduct {
  id          String    @id @default(uuid())
  orderId     String
  productId   String
  quantity    Int
  description String?
  statusId    String    // âœ… Status individual do item
  createdAt   DateTime? @default(now())
  updatedAt   DateTime? @default(now())

  order   Order       @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  product Product     @relation(fields: [productId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  status  OrderStatus @relation("OrderProductStatus", fields: [statusId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@map("order_products")
}

model PaymentType {
  id   String @id @default(uuid())
  name String

  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())
  payments  Payment[]

  @@map("payment_types")
}

model PaymentStatus {
  id   String @id @default(uuid())
  name String

  createdAt DateTime? @default(now())
  updatedAt DateTime? @default(now())
  payments  Payment[]

  @@map("payment_statuses")
}

model Payment {
  id              String @id @default(uuid())
  orderId         String
  paymentTypeId   String
  paymentStatusId String
  amount          Float

  createdAt DateTime  @default(now())
  updatedAt DateTime? @default(now())

  order         Order         @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  paymentType   PaymentType   @relation(fields: [paymentTypeId], references: [id], onDelete: Restrict, onUpdate: Cascade)
  paymentStatus PaymentStatus @relation(fields: [paymentStatusId], references: [id], onDelete: Restrict, onUpdate: Cascade)

  @@map("payments")
}
